// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: {{.Version}}
// Version Date: {{.VersionDate}}

package server

import (
        "flag"
        "os"
        "fmt"
	"log"
	"net"
	"net/http"
	"net/http/pprof"
	"path/filepath"

	// 3d Party
	"google.golang.org/grpc"
	"github.com/joho/godotenv"

	// This Service
	pb "{{.PBImportPath -}}"
	"{{.ImportPath -}} /svc"
	"{{.ImportPath -}} /handlers"
)

var DefaultConfig Config

func init() {
	flag.StringVar(&DefaultConfig.DebugAddr, "debug.addr", ":9092", "Debug and metrics listen address")
	flag.StringVar(&DefaultConfig.HTTPAddr, "http.addr", ":9090", "HTTP listen address")
	flag.StringVar(&DefaultConfig.GRPCAddr, "grpc.addr", ":9091", "gRPC (HTTP) listen address")

    // parse local env file
    envFile, err := filepath.Abs(".env")
    if err == nil || os.IsExist(err) {
        _ = godotenv.Load(envFile)
    }

	// Use environment variables, if set. Flags have priority over Env vars.
	if addr := os.Getenv("SERVICE.DEBUG_ADDR"); addr != "" {
        DefaultConfig.DebugAddr = addr
    }
    if port := os.Getenv("SERVICE.HTTP.PORT"); port != "" {
        DefaultConfig.HTTPAddr = fmt.Sprintf(":%s", port)
    }
    if ip := os.Getenv("SERVICE.HTTP.IP"); ip != "" {
        DefaultConfig.HTTPAddr = fmt.Sprintf("%s%s", ip, DefaultConfig.HTTPAddr)
    }
    if port := os.Getenv("SERVICE.GRPC.PORT"); port != "" {
        DefaultConfig.GRPCAddr = fmt.Sprintf(":%s", port)
    }
    if ip := os.Getenv("SERVICE.GRPC.IP"); ip != "" {
        DefaultConfig.GRPCAddr = fmt.Sprintf("%s%s", ip, DefaultConfig.GRPCAddr)
    }
}

// Config contains the required fields for running a server
type Config struct {
	HTTPAddr string
	DebugAddr string
	GRPCAddr string
}

func NewEndpoints(service pb.{{.Service.Name}}Server) svc.Endpoints {
	// Business domain.

	// Wrap Service with middlewares. See handlers/middlewares.go
	service = handlers.WrapService(service)

	// Endpoint domain.
	var (
	{{range $i := .Service.Methods -}}
		{{ToLower $i.Name}}Endpoint = svc.Make{{$i.Name}}Endpoint(service)
	{{end}}
	)

	endpoints := svc.Endpoints{
	{{range $i := .Service.Methods -}}
		{{$i.Name}}Endpoint:    {{ToLower $i.Name}}Endpoint,
	{{end}}
	}

	// Wrap selected Endpoints with middlewares. See handlers/middlewares.go
	endpoints = handlers.WrapEndpoints(endpoints)

	return endpoints
}

// Run starts a new http server, gRPC server, and a debug server with the
// passed config and logger
func Run(cfg Config) {
	service := handlers.NewService()
	endpoints := NewEndpoints(service)

	// Mechanical domain.
	errc := make(chan error)

	// Interrupt handler.
	go handlers.InterruptHandler(errc)

	// Debug listener.
	if enable := os.Getenv("SERVICE.DEBUG.ENABLE"); enable != "false" {
        go func() {
            log.Println("transport", "debug", "addr", cfg.DebugAddr)

            m := http.NewServeMux()
            m.Handle("/debug/pprof/", http.HandlerFunc(pprof.Index))
            m.Handle("/debug/pprof/cmdline", http.HandlerFunc(pprof.Cmdline))
            m.Handle("/debug/pprof/profile", http.HandlerFunc(pprof.Profile))
            m.Handle("/debug/pprof/symbol", http.HandlerFunc(pprof.Symbol))
            m.Handle("/debug/pprof/trace", http.HandlerFunc(pprof.Trace))

            errc <- http.ListenAndServe(cfg.DebugAddr, m)
        }()
	}

	// HTTP transport.
	if enable := os.Getenv("SERVICE.HTTP.ENABLE"); enable != "false" {
        go func() {
            log.Println("transport", "HTTP", "addr", cfg.HTTPAddr)
            h := svc.MakeHTTPHandler(endpoints)
            errc <- http.ListenAndServe(cfg.HTTPAddr, h)
        }()
	}

	// gRPC transport.
	if enable := os.Getenv("SERVICE.GRPC.ENABLE"); enable != "false" {
        go func() {
            log.Println("transport", "gRPC","addr", cfg.GRPCAddr)
            ln, err := net.Listen("tcp", cfg.GRPCAddr)
            if err != nil {
                errc <- err
                return
            }

            srv := svc.MakeGRPCServer(endpoints)
            s := grpc.NewServer()
            pb.Register{{.Service.Name}}Server(s, srv)

            errc <- s.Serve(ln)
        }()
	}

	// register server
    go func() {
        handlers.Register().Up()
    }()

	// Run!
	log.Println("exit", <-errc)
}

