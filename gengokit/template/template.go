// Code generated by go-bindata. DO NOT EDIT.
// sources:
// NAME-service/cmd/NAME/main.gotemplate (376B)
// NAME-service/handlers/handlers.gotemplate (63B)
// NAME-service/handlers/hooks.gotemplate (63B)
// NAME-service/handlers/middlewares.gotemplate (76B)
// NAME-service/svc/client/grpc/client.gotemplate (3.299kB)
// NAME-service/svc/client/http/client.gotemplate (107B)
// NAME-service/svc/endpoints.gotemplate (4.398kB)
// NAME-service/svc/server/run.gotemplate (3.393kB)
// NAME-service/svc/transport_grpc.gotemplate (3.056kB)
// NAME-service/svc/transport_http.gotemplate (108B)

package template

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdNameMainGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\xb1\x6e\xc3\x20\x18\x84\x67\x23\xf1\x0e\xa7\x4c\xce\x50\xb3\x77\x8d\x3b\x64\x69\xa2\x34\xed\x4e\xec\xc3\x46\x75\x70\x04\xd8\x51\x64\xf9\xdd\x2b\xec\xa8\xca\xc4\x7f\xdc\xc7\x1d\xa0\x14\x76\x7d\x4d\x34\x74\xf4\x3a\xb2\xc6\xe5\x81\xe8\x87\x10\x0a\x94\x07\x7c\x1e\xce\xf8\x28\xf7\xe7\x42\x0a\xa5\x70\xa2\x1f\x9c\xb3\xae\x59\x09\xdc\x6d\xd7\xa1\x1f\xe9\xef\xde\x46\x22\xb6\x36\xc0\xd8\x8e\x2b\xfd\x43\x1f\x6c\xef\xde\x31\x4d\xc5\x73\x9e\xe7\x57\x07\xa5\x8e\x7c\xb5\x93\x4e\x88\x14\x37\x5d\xfd\xea\x86\xb8\x6a\xeb\x92\xb6\xd7\x5b\xef\x23\x72\x29\xb2\x8d\xe9\x74\xb3\x49\x9b\x99\x52\x38\xa7\xce\x2f\xfa\xd1\x56\x4c\xe6\x34\x15\xfb\x85\x3d\xea\xd8\xe2\x6d\x9e\xa1\xc2\x58\xa9\x40\x3f\xd2\x6f\xa4\xd8\xa6\x83\x66\x70\xd5\x12\x9d\x6f\x31\xad\x39\xdf\xb7\x5a\x47\x42\xd7\xb5\x67\x08\x0c\xb0\x06\xb1\xe5\x03\xad\x1e\x89\x0b\xe9\xfe\x1f\x1a\xe9\xd2\x27\xa5\x6b\x04\x29\xb2\xb4\x16\x47\xed\x03\xf3\x25\x3c\x5b\xbb\x8a\xd3\xe0\xf2\xe7\x58\xd2\xe8\xa1\x8b\xbb\xde\x19\xdb\x6c\xa5\x98\xa5\xf8\x0b\x00\x00\xff\xff\x01\x9c\x46\x61\x78\x01\x00\x00")

func cmdNameMainGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_cmdNameMainGotemplate,
		"cmd/NAME/main.gotemplate",
	)
}

func cmdNameMainGotemplate() (*asset, error) {
	bytes, err := cmdNameMainGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/NAME/main.gotemplate", size: 376, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2e, 0x17, 0x89, 0x8a, 0xaa, 0x99, 0xb2, 0x34, 0xd7, 0xec, 0xa8, 0x8f, 0x9a, 0x29, 0x93, 0x35, 0x8d, 0x2a, 0xd3, 0x33, 0x6e, 0x75, 0x6, 0x78, 0xd, 0x6a, 0xe9, 0xda, 0x80, 0xbd, 0x1c, 0x87}}
	return a, nil
}

var _handlersHandlersGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xd6\xd7\x52\x08\x4e\x4d\x55\x48\xcf\xd7\x2d\x29\x2a\x2d\x2e\xd6\x4f\x4f\xcd\x4b\xcf\xcf\xce\x2c\xd1\xcf\x48\xcc\x4b\xc9\x49\x2d\xd2\x2f\x49\xcd\x2d\xc8\x49\x2c\x49\x2d\xd6\x4b\xcf\x57\x48\xcb\x2f\x52\x48\xce\x4f\x49\x55\xd0\xd2\xaf\xad\xe5\xe5\x02\x04\x00\x00\xff\xff\x94\x4c\x08\x12\x3f\x00\x00\x00")

func handlersHandlersGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersHandlersGotemplate,
		"handlers/handlers.gotemplate",
	)
}

func handlersHandlersGotemplate() (*asset, error) {
	bytes, err := handlersHandlersGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/handlers.gotemplate", size: 63, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0x88, 0x2f, 0x79, 0x1b, 0x2b, 0xcc, 0xe8, 0x7c, 0x5c, 0x2c, 0x77, 0xdc, 0xe7, 0xd5, 0x2b, 0x5d, 0xa2, 0x78, 0xe, 0x3b, 0x19, 0x5f, 0x3e, 0x33, 0x37, 0xbb, 0x72, 0x86, 0x49, 0xfe, 0xdd}}
	return a, nil
}

var _handlersHooksGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xd6\xd7\x52\x08\x4e\x4d\x55\x48\xcf\xd7\x2d\x29\x2a\x2d\x2e\xd6\x4f\x4f\xcd\x4b\xcf\xcf\xce\x2c\xd1\xcf\x48\xcc\x4b\xc9\x49\x2d\xd2\x2f\x49\xcd\x2d\xc8\x49\x2c\x49\x2d\xd6\x4b\xcf\x57\x48\xcb\x2f\x52\x48\xce\x4f\x49\x55\xd0\xd2\xaf\xad\xe5\xe5\x02\x04\x00\x00\xff\xff\x94\x4c\x08\x12\x3f\x00\x00\x00")

func handlersHooksGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersHooksGotemplate,
		"handlers/hooks.gotemplate",
	)
}

func handlersHooksGotemplate() (*asset, error) {
	bytes, err := handlersHooksGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/hooks.gotemplate", size: 63, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0x88, 0x2f, 0x79, 0x1b, 0x2b, 0xcc, 0xe8, 0x7c, 0x5c, 0x2c, 0x77, 0xdc, 0xe7, 0xd5, 0x2b, 0x5d, 0xa2, 0x78, 0xe, 0x3b, 0x19, 0x5f, 0x3e, 0x33, 0x37, 0xbb, 0x72, 0x86, 0x49, 0xfe, 0xdd}}
	return a, nil
}

var _handlersMiddlewaresGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x41\x0a\x02\x31\x0c\x05\xd0\xbd\xe0\x1d\xb2\x2e\x68\x0e\xe3\x09\x8a\xf9\xc6\x62\xdb\x48\x92\x61\x16\xa5\x77\x9f\xb7\x16\x17\x7a\x01\xa4\xf6\x48\x3f\x22\x58\x31\xd5\x7e\x2d\xf9\x5b\xa7\x74\x78\x70\x62\xfc\x7b\x4d\x04\x8f\x26\xd2\x71\x56\x47\x3c\xd5\xe8\x63\x4e\x6f\x13\x50\xe1\xbd\xef\xb7\x2b\x00\x00\xff\xff\xeb\xa6\xcc\x76\x4c\x00\x00\x00")

func handlersMiddlewaresGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersMiddlewaresGotemplate,
		"handlers/middlewares.gotemplate",
	)
}

func handlersMiddlewaresGotemplate() (*asset, error) {
	bytes, err := handlersMiddlewaresGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/middlewares.gotemplate", size: 76, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb3, 0xc8, 0x25, 0x5, 0xd9, 0x58, 0x94, 0xe2, 0x24, 0xe6, 0x20, 0x97, 0xcb, 0x5f, 0x27, 0x16, 0x26, 0x8f, 0x35, 0x28, 0xb6, 0x9c, 0xc7, 0xe2, 0xd5, 0x16, 0xe7, 0xae, 0xf7, 0x74, 0x21, 0x28}}
	return a, nil
}

var _svcClientGrpcClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\xcd\x6e\xdb\x38\x10\x3e\xdb\x80\xdf\x61\xd6\x08\x16\x52\xa0\xd0\xf7\x2c\x7c\xa9\xd3\x2d\xba\xd8\xa6\x46\x1a\x74\x0f\x45\x51\x30\xd4\x48\x26\x2c\x93\x2a\x49\xdb\x31\x04\xbd\xfb\x62\x48\xca\x96\x12\xc7\xed\xc1\xb0\xc8\x19\xce\xcf\xf7\xcd\x70\x38\x9b\xc1\x42\xe7\x08\x25\x2a\x34\xdc\x61\x0e\x4f\x07\x70\x66\x6b\x2d\x83\xbb\xcf\x70\xff\xf9\x11\xde\xdf\x7d\x7c\x64\x93\xf1\x6c\x06\x0f\x68\xb6\x4a\x49\x55\x06\x0d\xd8\xcb\xaa\x02\xbd\x43\xb3\x37\xd2\x21\xb8\x95\xb4\x50\xc8\x0a\x83\xf6\x57\x34\x56\x6a\x75\x0b\x4d\xc3\xe2\x77\xdb\xf6\x25\x70\xc7\x1d\xf6\xc5\xb4\x26\x15\xaf\xb4\xe4\x62\xcd\x4b\x84\xd2\xd4\x02\x6a\xa3\x77\x32\x47\x0b\x1c\xca\x87\xe5\x02\x44\x25\x51\x39\x28\xb4\x01\xb7\x42\x32\xf1\x05\xcd\x4e\x0a\x64\xf7\x7c\x83\x6d\x0b\x36\x2e\x27\xe3\xba\x67\x87\x4c\xcb\x4d\xad\x8d\x83\x64\x32\x1e\x4d\x85\x56\x0e\x9f\xdd\x94\xbe\x4b\xad\xcb\x0a\x59\xa9\x2b\xae\x4a\xa6\x4d\x39\xa3\x13\x17\x44\xb3\x0d\x3a\x9e\x73\xc7\x83\x8e\x74\xab\xed\x13\x13\x7a\x33\xab\xd7\xe5\x0c\x8d\xd1\xc6\x4e\xc9\xe1\x40\x56\xea\x9b\xb5\x74\x33\xfa\xa1\xca\x6b\x2d\x95\xf7\x4e\xf6\x9c\xe1\xca\xfa\xd8\xde\x38\x70\x54\xe8\x22\x9b\x8c\x47\xb3\x19\x3c\x12\xec\x31\x7d\xf2\xd6\x34\xec\xa3\xcf\x71\xc9\xdd\x0a\x6e\xda\x16\x66\x76\xe7\x13\xa9\x9f\x80\xa4\xcb\x77\x43\xf9\x74\x32\x4e\x23\xe8\xf7\xb8\x07\x83\x6e\x6b\x94\x05\xae\x3a\x14\xe1\x89\x8b\x75\x28\x8d\x21\xfe\x42\x2b\x85\xc2\x49\xad\x18\x7c\x74\x20\x2d\xb1\xe1\x0d\x19\xb4\xb5\x56\x56\x3e\xc9\x4a\xba\x03\xe8\xc2\xf3\x24\x78\x55\xa1\x01\xa7\x21\x97\xbc\xca\x80\xab\x1c\x2a\xee\xd0\x80\xa8\xb4\xc5\x2c\x28\x9d\x8c\x4e\xc6\xc5\x56\x09\x8a\x2a\xa1\x5d\xb8\xa6\xc4\xd9\xc2\x3b\x5f\x68\xa5\x32\xd0\x35\x29\x5a\x60\x2c\x6e\x7f\xf6\x1b\x29\x24\xf5\x13\x7b\x55\x16\xb4\x42\x93\x81\x67\x27\x85\x66\x32\x1e\xed\xb8\x01\x21\x62\x42\x0b\xad\x0a\x59\x7a\x60\xa9\xb4\x7e\x64\x50\xc0\xed\x1c\x0c\x57\x25\x1e\x5d\xd1\xa9\x11\x1a\x43\x92\x22\xf9\x53\x88\x94\x36\x64\x41\x56\xe1\x8f\x39\x28\x59\x05\x9d\x51\x40\x92\x36\xa2\x4b\xcb\xfe\x33\xbc\x4e\xd0\x98\x0c\xa6\x82\x2b\xa5\x1d\xf0\xba\xae\x0e\xd1\xf8\xd4\x9b\x6a\x27\xe3\x91\xef\x82\x91\xe8\xa5\x64\xc9\xdf\xb7\xef\x83\x4a\x19\xe4\xec\x7d\x9e\x13\xbf\xc3\x42\x1b\x4c\x7c\x48\xb1\xe2\xbf\xf2\x6a\x8b\xf6\x51\x7f\x78\x58\x2e\x3e\xc5\x32\x4e\x84\x60\x2b\xe4\x39\x1a\x9b\xa6\x59\x88\x61\xd4\x34\x37\xb0\x97\x6e\x05\x57\x0e\x29\x00\x46\xfd\x39\xea\x6d\xd7\xeb\x92\xb0\x25\xd9\x95\x43\x16\xbb\x36\xc0\xed\x3d\x92\x6a\x00\xf0\x4a\x76\x5a\x1d\x2b\x9f\xd0\xad\x74\x6e\xa3\xa6\xe7\xa2\x69\x1e\xf5\xbf\x7a\x8f\x06\xae\x64\x64\xed\x7d\x6c\x14\xe8\x3a\x86\x75\x3b\xe1\x58\x00\x9b\x3c\xbd\x7d\x74\x0e\x43\x64\xee\x71\x1f\xc0\x49\xe2\x61\x42\x46\x65\xdd\x62\xda\x34\x5d\x66\x6d\xcb\x9a\xa6\x1f\x74\xd8\x9c\x0e\x74\xe5\xab\xdd\xf7\x4a\xe8\x1c\x09\xdf\x9e\xf8\x01\x7f\x6e\xd1\xba\xa3\xd2\x1d\x9e\x55\xf2\xad\x83\x47\x2d\x5f\xc9\x1f\xb4\x87\xf9\x4a\xb2\x4e\xfe\x78\xa8\xbb\x60\x9a\xf6\xa8\x3c\x28\x19\xc6\x58\x27\x48\x8f\xa0\x25\x69\xd8\xea\xe8\x41\x95\x77\xa4\x76\x9f\xc7\xaf\xc9\xb8\x2b\x62\xbb\x13\x47\x0b\xb6\xf1\x3a\x7d\x56\x5f\x52\x4a\xf7\x4a\xb0\xf9\x8a\x8b\x5b\x00\xb8\x44\x73\xd6\x0f\x60\xd4\x66\xd4\x3f\x93\x71\x37\x16\x08\x2c\x08\xd4\x41\x80\x6f\x32\xbe\x1c\x4a\x1c\x3a\x17\xb1\xa6\xab\x8b\xc3\xf0\x82\x65\xe1\x44\xa7\xf2\x37\xdd\x44\x6e\xc5\xfd\xad\xb7\x43\xe3\x2c\x70\x6f\xd8\x5f\x88\x67\xf2\x01\x83\xd4\xd9\x4e\x03\x87\xad\x45\x73\x93\xeb\x0d\x97\xea\x0d\xd5\xe0\x84\xc1\xd2\xc8\x0d\x37\xb2\x3a\xd0\x99\x62\x5b\x81\x54\xc0\xe3\xf5\xd4\xdd\x87\x17\x53\x49\x7e\x40\x6c\x72\xb6\x08\xff\x99\xaf\xfd\x07\x1f\x8d\x54\x0e\x4d\xc1\x05\x36\x6d\x0a\x49\x6f\x35\xb8\x14\x43\xe4\xb7\xf3\xd3\x41\x96\x5c\xff\xba\x0c\xd3\x53\xb9\x78\x0b\x27\xea\x7a\x05\xf5\x82\xc3\xd0\x27\xbf\xc9\xe1\xa5\xa6\x3a\x4b\x61\x38\x10\x35\xde\x64\xf0\xd7\xec\x04\x0f\x9e\xca\x0b\x74\x7b\xad\xdf\xa3\xf0\x52\x26\xe7\x18\xec\x42\xf8\x5d\xfe\x7e\xfa\xb9\x15\x23\x3a\xc3\x9d\x17\xbc\x45\xdd\xcf\xb3\xc4\x4d\xc6\xee\x50\xe3\x60\x52\x82\x75\x66\x2b\x9c\xf7\x19\x47\x07\x7c\xfb\x6e\x9d\x91\xaa\x3c\xb5\x6c\x7f\x48\x05\x96\x08\x02\xbf\xf2\x6c\x6c\x74\x2e\x0b\x89\x36\x4c\xff\xe3\xcb\xc2\x4f\x62\xef\x72\x60\x80\xce\x26\xd7\xfd\x28\xd2\x90\x3a\x79\xf3\xd8\x2e\xdc\x73\x37\xdf\xbe\xa0\xca\x93\x35\x1e\xfc\x03\x21\xc4\x95\x0e\xcd\x35\xa7\xc4\xbd\x65\x0d\xe7\x6c\x87\x81\xae\xbb\xf9\x08\x73\x20\xa3\xb4\x77\x9a\xf1\x61\x62\xb6\xc7\x30\x2e\x8d\x5a\x1f\x52\x87\x54\x0a\xe7\xa6\x76\xbf\x68\x5f\x06\x29\xdc\xf3\xeb\x12\xd9\xe4\x70\xdd\x3d\x49\xd9\xa7\xbb\xf4\xa5\x46\xc8\x81\x66\x6c\xcd\xe5\x80\xa8\x51\xf7\xda\x59\x9f\x5e\x3b\x3e\xc2\x30\x59\x65\x01\xbb\x0c\xb4\x17\x0a\xf7\xcc\x7c\x46\xc9\x3a\x65\x49\x8c\xff\x2f\x12\xc6\x29\x1c\x6c\xcf\xe9\x59\x43\xd8\xfb\x65\x06\xeb\x0c\x76\x61\xec\xb4\xf1\x85\x13\xdf\x4c\x41\x7d\xf0\x6a\xba\xde\xe4\x30\x87\x63\x26\xff\x68\xa9\x92\xeb\x4d\x9e\x9d\xb6\x96\x74\x28\x98\x66\x8c\xa5\x69\xcf\x64\x44\x49\xb8\xe7\x23\x1d\xff\x07\x00\x00\xff\xff\x2f\xd5\x1f\xf3\xe3\x0c\x00\x00")

func svcClientGrpcClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcClientGrpcClientGotemplate,
		"svc/client/grpc/client.gotemplate",
	)
}

func svcClientGrpcClientGotemplate() (*asset, error) {
	bytes, err := svcClientGrpcClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/client/grpc/client.gotemplate", size: 3299, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb0, 0xe5, 0xb5, 0xba, 0x75, 0x9a, 0xbe, 0xef, 0x38, 0x68, 0xa3, 0xdd, 0x67, 0xb3, 0x47, 0x9, 0xe0, 0x86, 0x3a, 0x1, 0xe0, 0xef, 0x7e, 0xc8, 0xca, 0x3a, 0xa2, 0x55, 0x74, 0x6f, 0x9b, 0x51}}
	return a, nil
}

var _svcClientHttpClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x31\xaa\x02\x31\x10\x06\xe0\xfe\xc1\xbb\xc3\xd4\x0b\x66\x0e\x61\xb3\xa5\x60\x2e\x10\xd6\xdf\xb8\x38\x66\xc2\xe4\xb7\x0a\x7b\x77\x11\xec\xbf\x6f\x4e\x5d\xe4\x0a\x48\xf5\x13\xe3\x3d\x86\x56\xb4\xea\xcf\x9d\xfa\x20\x3b\xa3\xb4\xd1\x3d\xa8\xc4\xab\x5b\x21\x52\x75\xb9\x7b\xc8\xe6\x37\xc8\xa2\xc7\xf1\xff\x37\xe7\x56\xcc\x24\xad\x39\x5f\x56\x58\x47\xa4\xb3\xed\x68\xcc\xbf\x23\xe9\xcb\x3e\x01\x00\x00\xff\xff\xc4\x1a\x19\x91\x6b\x00\x00\x00")

func svcClientHttpClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcClientHttpClientGotemplate,
		"svc/client/http/client.gotemplate",
	)
}

func svcClientHttpClientGotemplate() (*asset, error) {
	bytes, err := svcClientHttpClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/client/http/client.gotemplate", size: 107, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6a, 0xac, 0x71, 0x30, 0xd7, 0x2a, 0x4b, 0xec, 0x4d, 0x63, 0x80, 0xb8, 0xed, 0x24, 0x66, 0x32, 0x32, 0xcc, 0x89, 0xa1, 0x8c, 0xff, 0xa0, 0xc1, 0x31, 0x0, 0xc5, 0xab, 0xf5, 0x1d, 0x4c, 0xe3}}
	return a, nil
}

var _svcEndpointsGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x5d\x6f\xdb\xb8\x12\x7d\xb6\x01\xff\x87\xa9\x91\x8b\xd8\x85\x42\xbf\xa7\xc8\xc3\xbd\x6d\xee\xbd\x01\xb6\x1f\x68\xb2\xbb\x0f\x45\x51\xd0\xd2\xc8\x22\x42\x91\x2c\x49\xd9\xf1\x0a\xfe\xef\x8b\x21\x29\x59\x8e\xb5\xdd\x76\x5f\x77\x1f\x82\xd8\xfc\x38\x9c\x39\x67\xe6\x90\x5e\xad\xe0\xb5\x2e\x10\x36\xa8\xd0\x72\x8f\x05\xac\xf7\xe0\x6d\xe3\x1c\x83\x37\xef\xe1\xdd\xfb\x07\xb8\x7d\x73\xf7\xc0\x66\xd3\xd5\x0a\x3e\xa2\x6d\x94\x12\x6a\x13\x57\xc0\x4e\x48\x09\x7a\x8b\x76\x67\x85\x47\xf0\x95\x70\x50\x0a\x89\x71\xf5\x2f\x68\x9d\xd0\xea\x1a\xda\x96\xa5\xcf\x87\xc3\x70\x06\xde\x70\x8f\xc3\x69\xfa\x4e\x4b\x66\x53\xc3\xf3\x47\xbe\x41\x70\xdb\x9c\xbe\xae\x56\xf0\xd0\x81\x43\xae\x95\xe7\x42\x39\xa8\xd1\x57\xba\x70\xe0\x35\xd4\xfc\x11\x41\xa8\x42\x6c\x45\xd1\x70\x09\xa8\x0a\xa3\x85\xf2\x0e\x4a\xab\x6b\x70\x68\xb7\x22\x47\x97\x05\x28\x8b\x5f\x1b\x74\x1e\xb8\x2a\xc0\xa2\x33\x5a\x39\x04\xbf\x37\x18\xa0\x68\x2d\xe5\xa2\x1d\x1e\x61\x32\xe0\x0e\x76\x28\x25\xfd\x47\x95\xeb\x02\xad\x23\x80\x00\x58\x60\x1a\x28\xb5\x4d\x3b\x03\x5c\x16\x06\x38\x91\x54\x82\x6e\x2c\xb8\xc6\x18\x6d\x89\x65\x6f\xb9\x72\xf4\x99\xce\x13\x5c\x8a\xdf\xb8\x17\x5a\x05\xb8\x52\xdb\x9a\x7b\xc7\x28\x73\x51\x87\x45\x8b\xd9\x74\x32\x2f\x6b\x3f\xa7\xff\x44\x00\x3e\xd1\x67\xfa\xb6\x11\xbe\x6a\xd6\x2c\xd7\xf5\x6a\xa3\xaf\x1e\x85\x5f\xd1\x5f\x17\x79\x5c\x64\xd6\x30\x6f\x5b\xf6\xe1\x3f\x77\x01\xee\x03\xf7\x15\x5c\x1d\x0e\xf3\xd9\x74\x99\xe8\xbd\xed\x09\xcb\xb5\x94\x98\x7b\xd7\xc5\xed\xab\x01\x0f\xe0\x2b\xee\x21\xd7\xb5\xa1\x24\xb9\x02\x5e\x14\x1d\xbb\x0c\xee\xfc\xa5\x0b\x68\x35\x72\xe5\x89\xcc\x35\x42\xe3\xb0\x20\xd6\x38\x54\x28\x0d\x5a\x70\xde\x36\xb9\xcf\x68\x3a\x9d\x35\x7e\x94\x50\x5e\x03\x0f\x78\x4e\xa8\x8d\x44\x30\xdc\xf2\x1a\x3d\xda\x50\x60\x61\xe6\x4e\x01\x8f\x92\xd9\x0c\x84\xbf\x74\x74\x5e\xd9\xc8\xc0\x7c\xd9\xa8\x9c\x58\x4d\x61\x2b\x24\xe2\x35\x68\x13\x4a\x1d\x34\xed\x35\x68\xaf\xba\x33\x03\xe2\x9a\x3b\xe1\x18\xfc\x57\x5b\xc0\x27\x5e\x1b\x89\x19\xec\x75\x03\xb5\xd8\x54\x1e\x0c\x77\xa4\xfb\x80\x2f\x0a\xb2\x3f\x29\x1e\x64\xac\x2e\x9a\x1c\x23\x17\x5c\x41\xe5\xbd\x61\xff\xe7\xaa\x90\x14\xe5\x4e\xf8\x0a\x90\xe7\x55\x2a\x60\x58\x74\xe7\x2f\x61\x27\x2c\x16\xd0\x98\x88\xea\x0c\xe6\xa2\x14\x39\x18\xee\x2b\x06\x8b\xbb\x18\xa1\x70\x74\xc2\x9a\xaf\xe5\x1e\x38\xd4\xc2\xf9\x58\xfd\x50\xa0\x13\x1b\x45\x7b\x85\xda\xea\x47\x0c\x84\xde\x47\x75\xfa\x6e\x09\x41\xe2\x33\xd1\xa3\x26\x84\xd1\xb1\xc9\x96\xa7\x1c\xe7\x52\xa0\xf2\xa7\x1c\x0f\x14\x3c\xf6\x9e\xdc\x53\x87\x46\x40\x2c\xbe\xa9\x27\x35\x49\x64\x4c\x10\xcf\x35\xc6\x0a\x3b\xc6\x2c\x94\x47\x5b\x72\xaa\xad\x71\x3d\x02\x5a\x7f\xdc\xb8\x03\x34\x2e\x3a\x56\x6a\xb8\x55\x50\xe3\x1d\xee\x5e\xa7\x8c\x72\x5d\xaf\x85\x0a\x64\xd5\x29\xc8\x81\xbe\x59\xb2\x09\xdf\x58\x05\x22\x14\x35\x45\x98\x73\x29\xd1\xc6\xba\x4e\xd1\xb2\xd9\x34\x24\x74\xc6\x6a\x3b\x9b\xb6\xad\xe5\x6a\x83\x70\x21\xe0\xfa\x06\x58\xb7\xe3\x6d\xd4\x84\x3c\x6f\xd2\xb6\x17\x82\xbd\xe3\x35\x1e\x0e\x1d\x02\x00\xf4\x79\xb0\xdb\xbe\x48\xdb\xf6\x8a\x86\x69\xd7\xe1\x79\xfb\x7e\xd7\x51\x54\xad\xb0\x18\x44\xba\x84\xc1\xe9\x8b\xdc\x3f\x41\xf2\x18\xf6\x3a\xfe\xcf\xa8\x34\x5e\x9a\x35\x6b\xdb\xff\x69\x5a\x06\x17\x82\x7d\x8c\x3e\xfa\xb0\x37\x98\xb6\x2e\x61\x71\xbe\x28\x1a\xec\x60\x55\x06\x68\xad\xb6\x4b\x22\x66\x32\xe9\x1c\x38\x8c\x52\xc8\xc8\x46\xa8\xa0\xa0\x28\x88\x25\x6d\x11\x65\x58\xfb\xe2\x06\x94\x90\x11\x65\x92\x14\x52\x42\x06\x20\x1a\x3b\x44\xf8\x30\xde\x9d\xc2\xbe\x27\xc0\x65\x46\x38\xb3\x29\x21\xb4\x6d\xa2\x3a\xf0\xfc\x96\x3a\xed\x84\xec\xd0\xcd\x17\x1e\x03\xd9\x49\xc8\xa1\x00\x17\x1e\x47\x35\x88\x22\x10\xde\x58\xb6\x0e\x42\x94\xc3\xcd\x71\xc5\x7d\x68\xce\xe5\x79\x59\x9c\xd2\x40\xe0\xe3\x3a\x76\x97\x5f\xdf\x5a\x2d\xa9\xd6\x5f\x83\x83\xe1\x28\xc8\x50\x2a\x82\xff\x4a\x49\x25\x90\x31\x32\xcf\x4a\x22\x6e\xdc\xf6\xf2\x3a\xf6\xac\xd6\x42\x4c\x69\xd9\x98\xb2\xa3\xda\x26\x75\xfb\xb9\x6d\x27\x59\x9a\x88\x42\x24\xe9\x4e\x35\xfc\xd5\x72\xf3\x6f\x29\x6f\x9f\x72\x34\x1e\x76\x96\x1b\x17\xed\xb8\xa7\xb2\x14\x28\x0b\xba\x90\x52\x03\x1f\x3b\x3a\xa8\x1d\x3d\x6c\xe4\xb2\x65\x6f\x45\x51\x48\xdc\x71\x9b\x9e\x40\x3f\xbb\xee\x55\x44\xef\x00\x63\xe4\x9e\xac\x88\x2c\xd6\x13\x7c\xdd\x2f\x0f\xd7\x08\x6e\xd1\xee\x7b\x65\xa9\xe3\xc8\x69\x5c\xef\x2e\xab\x15\xbc\x37\x74\xcb\x90\xc9\x66\x03\x87\xcb\xb9\xa2\x9b\x96\xee\x26\x2c\x68\xdf\x7a\x0f\x8a\x14\x89\x37\x30\x3e\xe5\xb2\x29\xb0\x88\x6f\xa1\x35\x52\x0c\x94\xb6\xc1\x82\x9d\x33\xb2\x38\x46\x95\xc1\xfc\xde\x73\xdf\xb8\x79\x06\xf3\x0f\x42\x6d\xe6\xcb\xd9\xb4\x33\x8f\x97\x03\xf7\xf8\x23\x00\x18\x61\x26\x3b\xc6\xc3\x18\x73\xde\x0a\xb5\x89\xf5\x25\x54\x1a\xbf\xbe\x81\x9a\x9b\x4f\x71\xee\x73\x14\xa1\x3d\x84\x6a\x20\xef\xfb\x53\x7f\x9b\x4c\xe6\x83\x1a\x9b\x5f\x43\x0f\x71\xc8\x3a\x90\x54\x11\x93\x50\x15\x13\xd2\xe7\x0b\x45\x16\xaa\x3b\xe0\xf7\x51\xb6\xc9\x72\xbe\x64\xa0\x1f\x69\xbe\x8b\xf3\x13\x3e\x7d\x7e\x05\x2f\xf4\x63\x2a\x54\xc3\x95\xc8\x17\x65\xed\xd9\xbd\xb1\x42\xf9\x72\x31\xbf\xed\x40\x7a\x55\x2f\xff\xe5\x2e\xa1\xd0\xe8\x40\x69\x0f\xf8\x24\x9c\x7f\x05\x0e\x71\x58\x0c\x7d\x41\x39\xb6\xd1\x73\x0a\x6b\xb9\xec\x0d\xad\x40\x89\x1e\x17\x5d\x10\x61\xf6\x24\x0f\xa1\xf2\x0c\xbe\x1c\x13\xe9\x69\xfd\x11\x02\x45\x49\xfb\xe0\xe6\x06\x4e\xa8\xec\x5a\x72\xd4\xa3\xe1\x66\x90\xc4\x62\x74\xc9\xf2\xd8\xa1\xcf\x44\xe8\xba\xf3\x27\xbe\x46\x89\xc5\xb1\x5e\xe2\xaf\x8c\x0d\xfa\xae\xbe\x87\xaf\xc4\x58\xe6\xbb\x0a\x55\x3f\xab\x87\x25\x9d\xd0\x62\x61\x66\xb1\x17\x53\xb7\x34\x71\x35\xc4\xdf\x2e\x3c\xfe\x02\x12\x39\xbd\x93\xac\xc8\xd3\x3b\x76\x10\x45\x25\xf2\x2a\xec\x75\xa8\xc6\x82\x48\x0f\x83\xb4\xbd\x7b\x18\x69\xdb\x3d\x0b\xce\x13\x0b\x26\x1d\x8b\x3c\x3b\x37\xf4\x11\x8f\x3f\x35\xb0\x93\xdc\xfe\xba\x8f\x9d\xc5\x95\xa5\x5c\x03\xef\x16\x73\x14\xdb\xf8\x92\x0c\x69\x3e\x7b\xa6\x33\xb8\x47\x3c\xe2\x0c\x60\xc2\x4c\xf7\xc4\xed\x0d\x82\x42\xa5\x22\x2d\xd0\x73\x21\xc3\x6b\xb4\x6b\xb4\xf8\xdb\x27\x3d\xa4\xb9\x14\x7e\xcf\xbe\xe9\x36\x27\xf9\x0f\x4d\xe7\x87\x79\xfd\xc7\x92\xfe\x1e\x96\x74\xb2\x2f\x1b\x7f\x68\x7e\xd3\xa1\x7e\x0f\x00\x00\xff\xff\x51\x63\x26\xf4\x2e\x11\x00\x00")

func svcEndpointsGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcEndpointsGotemplate,
		"svc/endpoints.gotemplate",
	)
}

func svcEndpointsGotemplate() (*asset, error) {
	bytes, err := svcEndpointsGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/endpoints.gotemplate", size: 4398, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb8, 0x8e, 0xbf, 0xe7, 0x3b, 0xb7, 0x28, 0x35, 0xd8, 0xb4, 0x4f, 0xb4, 0x74, 0x82, 0x87, 0xa0, 0x41, 0xde, 0x13, 0x77, 0x3c, 0x56, 0xab, 0xc4, 0xcf, 0xf3, 0x74, 0x42, 0x6b, 0x2a, 0x19, 0xca}}
	return a, nil
}

var _svcServerRunGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x4f\x6f\xdb\x3a\x12\x3f\xdb\x80\xbf\xc3\x54\xe8\x2e\x64\xc0\x95\x0a\xec\x76\x0f\xd9\xfa\xd0\xc6\x69\x1b\xa0\x49\x0d\xc7\xed\x3b\x3e\x30\xd2\x48\x26\x2a\x91\x7a\x43\xca\x6e\x20\xf8\xbb\x3f\x0c\x29\xc9\x72\x1a\xbb\xcd\xcb\x21\x96\xc8\x99\xdf\xfc\xe6\xbf\xe2\x18\x2e\x75\x8a\x90\xa3\x42\x12\x16\x53\xb8\x7f\x00\x4b\xb5\x31\x11\x2c\xbe\xc0\xed\x97\x35\x5c\x2d\xae\xd7\xd1\x64\x1c\xc7\xb0\x42\xaa\x95\x92\x2a\xf7\x12\xb0\x93\x45\x01\x7a\x8b\xb4\x23\x69\x11\xec\x46\x1a\xc8\x64\x81\x5e\xfa\x1b\x92\x91\x5a\x5d\x40\xd3\x44\xed\xf3\x7e\x3f\xbc\x81\x85\xb0\x38\xbc\xe6\x77\x16\x99\x8c\x2b\x91\x7c\x17\x39\x82\x41\xda\x22\xf1\x89\x2c\x2b\x4d\x16\xc2\xc9\x18\xda\xbf\x20\x2b\x44\x1e\x0c\xde\xb5\x19\xbe\x65\xa5\x0d\x26\xe3\x51\x50\xe8\xdc\xfd\x2a\xb4\xdd\x6f\xbc\xb1\xb6\x3a\x7a\x89\xab\x8a\x74\x16\xb0\xa1\x51\x1c\xc3\x7f\x52\x58\x0a\xb2\x0f\x2c\x92\x6b\x9d\x17\x18\xe5\xba\x10\x2a\x8f\x34\xe5\x71\x4e\x55\xd2\x8b\xae\xd9\xe9\x3b\xa4\xad\x4c\x70\x32\x1e\x55\xf7\x10\x34\x4d\xb4\x7c\x7f\xed\xf8\x2e\x85\xdd\xc0\xab\xfd\xde\x19\x6b\x9a\xe8\xf8\x14\x62\xb3\x4d\x4e\x5d\x6d\x84\x4a\x0b\x24\xf6\x69\xca\xc6\xb6\x82\x60\x81\x99\xa8\x0b\x7b\xa9\x55\x26\x73\xf0\x3f\x7c\x97\xd5\x2a\x01\xa9\xa4\x0d\xa7\xd0\x4c\xc6\x23\x8e\x4c\x74\x67\x49\xaa\xfc\x9b\xa0\xf0\xdf\x47\x7a\xd1\x02\xef\xeb\xfc\x5d\x9a\xd2\x0c\x82\x94\x9f\x23\x91\xa6\x14\xcc\x20\xb8\x78\xf3\xfa\x7f\xaf\xf9\xc1\x89\x80\x50\x29\x94\x68\x49\x26\x06\x0a\x69\x2c\x2a\x60\x49\x34\x26\x98\xfe\xd2\xca\xa7\xf5\x7a\xd9\x1a\xe1\x08\x0f\x6d\xbc\x71\x36\x58\xe0\xf9\xb0\x1f\x57\xcb\xcb\x16\x96\xf3\x30\x84\xfd\xaf\x83\xcd\x57\xcb\x4b\x08\x19\x7c\xfa\x04\xba\x4f\xda\x57\x83\x80\x6a\x2b\x49\xab\x12\x95\x85\xad\x20\x29\xee\x0b\x34\x33\x90\x19\x18\xb4\x11\x7c\x28\x44\x6e\x60\x23\xb6\x08\x15\x49\x4d\xd2\x3e\xb8\x52\x87\x2b\xb5\x65\x79\x13\x4d\xc6\x23\x99\x39\x6c\xb8\x98\x83\x36\xd1\x47\xb4\xa8\xb6\x61\xb0\xb8\x7a\xff\xf5\xe3\x9f\xef\x16\x8b\x55\x30\xfd\xbf\x17\x78\x31\x87\x20\x70\xa9\x19\x9d\xc8\x05\xcc\x9d\xe4\x64\x3c\xda\x7b\x60\x57\xee\xc7\xc0\xcb\x2f\xab\x35\x43\xba\xab\x93\x90\x5d\xe0\x61\x0e\x59\x69\xa3\xbb\x8a\xa4\xb2\x59\x18\x5c\xfc\xcb\x04\x33\xa7\x3b\x3d\x58\x79\x82\x3e\xeb\xff\x26\xfb\x81\xa9\x63\xf2\x4f\xc0\x72\xe2\x7e\x13\xb6\xcb\xf1\x11\xac\x9b\x0b\x6e\x5c\xb9\xe2\x4f\xb4\xb2\x42\x2a\x03\x76\x83\x40\xf8\x57\x2d\x09\x53\xc8\x24\x16\xa9\x81\x4c\x13\x74\xa3\x4a\xf4\x43\xc4\x3e\x54\xd8\xa9\x1b\x4b\x75\x62\x9d\xf1\xde\x09\xe3\x6a\x6e\x32\x1e\x1d\x92\xd2\x1f\xf5\x94\xba\x93\x7d\xdf\x77\xb7\xb8\xbb\x52\x69\xa5\xa5\xb2\x26\x9c\x82\xd9\x26\x51\xff\xee\x0c\xc4\x31\xbc\xaf\x8d\x54\x68\x0c\xa4\xba\x14\x52\x71\xed\x70\x3f\x1b\x3f\x37\xa0\xba\x8f\x9a\x26\x6a\xa7\x48\x74\x2b\x4a\xdc\xef\xef\x5a\xd6\x23\x17\xa0\x4e\x72\x0e\xdd\x5c\x88\x6e\x71\xd7\x6a\x84\x9c\x50\x36\xf3\x07\x89\xaa\x1b\x46\xb0\x93\x76\x03\xa5\x4c\xd3\x02\x77\x82\xd0\x44\x70\x87\xd8\xab\xc7\xc3\x9b\x5c\x9f\xb0\xc1\x80\x9d\x91\xf6\xba\x2d\x1e\xef\x57\xe7\xe8\x23\xbf\x42\xa6\xdd\x90\x50\x39\xc2\x4b\xc9\x85\xd0\x3b\x77\x83\x76\xa3\x53\xc3\x33\x8e\x6d\x36\xcd\x5a\x7f\xd6\x3b\x24\x78\x29\x5b\xc7\x7b\xcc\xb9\x8b\xe5\x8d\xf8\x8e\x4d\xf3\xd3\xed\x90\x4e\xd3\xa0\x4a\x1d\x9e\xef\x70\xec\xc3\x7f\x31\x3f\xce\x47\xf3\x0c\x62\x3f\x99\xbc\xe0\xbd\x72\x86\xf0\xec\x88\x4a\x1f\x23\x97\x14\x83\x05\x26\xbc\x5e\x0f\xa5\xf1\xdc\xfc\x1c\xbc\x7a\x94\xa0\x43\xf5\xf5\x22\x3e\x0e\x84\xb6\x26\x05\xfd\xe9\xa1\x89\x56\xb5\x02\x63\x05\x59\x03\x02\x14\xee\x80\x47\x74\xdb\x28\x33\x70\x23\xb4\x7b\xe1\x25\x20\xc0\xed\x89\xf6\xcc\x33\xb7\x1b\x74\x50\x95\x30\x06\x53\xee\x47\xee\x2b\x96\x2e\x74\x9e\x73\xe5\xba\xee\x58\xd5\x2a\x4c\xb2\x6e\x59\xf9\xf5\x74\x94\x9f\xe3\xf6\xe9\x82\x76\x83\xc9\x46\x28\x99\x88\x62\x50\x5a\x48\x94\xb0\x4a\x29\xbe\x63\xc8\xf7\x80\x44\x9a\x7a\xa5\x6b\x65\x91\xa8\xae\x6c\x17\x1f\x56\xca\xf5\x21\x5a\xbd\xc0\x27\x7f\x12\x32\x62\xaf\xee\x97\x9e\xdf\x19\xbd\x2e\x3b\xd1\x6e\xd5\x51\xa1\xf3\x68\xc9\xd3\xb4\x50\x61\x60\x49\x28\xc3\xd3\x34\xe8\xd6\x28\x3f\xb4\xeb\x28\xc9\x06\xa3\xdd\x1b\x18\x95\x4c\xdd\xad\xc2\xb6\x73\xf1\xa6\xfe\xe1\x5b\xb7\x8c\x3c\xa1\x30\x88\x1d\x92\xff\x1c\x89\x83\x99\x97\x6f\xd9\x7e\x60\x2a\xee\x26\xba\x56\x29\xfe\x98\x9e\xd3\x4d\xca\xb4\x90\x0a\x4f\x43\x5c\x7a\x81\xb3\x20\xfc\x4f\x16\x67\x40\x96\x5e\xe0\x2c\x88\x79\x28\xef\x75\x71\x1a\xe3\xce\xdd\x9f\x85\xb0\x24\x92\x33\x2c\xd6\x7c\x3d\x6d\xc3\xec\x8a\xe4\xed\x2b\x2f\xfb\xd9\x25\xf3\x9d\x4a\x5d\xbc\xc3\xa3\xb4\xcc\xa0\x74\xb3\xec\x50\x74\xee\x8b\xa4\xcf\xeb\xb3\x0a\x80\x55\x1f\xe5\xbf\xdb\x2b\xce\xb1\x4d\x37\x8a\x78\x9c\xf1\x4d\x5f\x81\x83\x96\xfd\x35\xf9\xc3\x47\xd5\xe6\x11\x77\xd7\xb3\xff\x8c\x3b\xab\x06\xb3\x21\xf5\x6e\xdb\x39\x4e\x85\x9a\x71\x9f\xb1\x03\x0a\x6d\xcb\x2a\x0c\x6c\x52\x3d\x25\x2d\x33\x27\xfc\x62\x0e\x4a\x16\xde\x72\xef\x15\x12\xb9\x77\x3f\x97\xf8\xd1\x0f\xc9\x91\xa1\xed\x30\x3e\x0c\xe8\xd7\xdf\xa3\xf0\xb8\x81\xe1\x3e\xfb\xba\x16\x22\xdf\x40\xd5\x7d\xb4\xc2\x9c\x99\xd1\x89\x45\x1a\x9a\x19\x18\xda\x3e\x2a\x12\x13\xf9\xd8\x16\xea\x51\x38\x57\xb5\x7a\x31\x19\x1f\x07\x0d\x7f\x48\x8e\xd7\xdb\x57\xed\xd4\x70\xe4\xff\x0e\x00\x00\xff\xff\xf0\x75\xb7\x23\x41\x0d\x00\x00")

func svcServerRunGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcServerRunGotemplate,
		"svc/server/run.gotemplate",
	)
}

func svcServerRunGotemplate() (*asset, error) {
	bytes, err := svcServerRunGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/server/run.gotemplate", size: 3393, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2, 0x46, 0xbf, 0x12, 0x3e, 0xf6, 0x32, 0x60, 0x2b, 0xd3, 0x74, 0x83, 0x28, 0xbf, 0x67, 0xd5, 0x44, 0x45, 0xe4, 0xfc, 0xe9, 0x8d, 0x70, 0x90, 0xa9, 0xbf, 0x15, 0xe0, 0x48, 0x20, 0xe9, 0x56}}
	return a, nil
}

var _svcTransport_grpcGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x5d\x6f\xe2\x38\x14\x7d\x06\x89\xff\x70\x17\x8d\x56\x30\xa2\xce\x3e\x57\xea\xcb\xb4\xdd\x69\xb5\xdb\x0f\x75\xd1\xec\xc3\x68\x34\x32\xc9\x25\xb1\x48\xec\xd4\x36\xb4\xac\xc5\x7f\x5f\x5d\xdb\x09\xa1\x50\xca\x3c\x20\x11\xfb\xf8\x7e\x9c\x73\x7c\x93\x24\x81\x4b\x95\x21\xe4\x28\x51\x73\x8b\x19\xcc\xd6\x60\xf5\xd2\x18\x06\x57\x0f\x70\xff\x30\x85\xeb\xab\xdb\x29\x1b\xf4\x93\x04\x9e\x50\x2f\xa5\x14\x32\x0f\x08\x78\x11\x65\x09\x6a\x85\xfa\x45\x0b\x8b\x60\x0b\x61\x60\x2e\x4a\x0c\xe8\x6f\xa8\x8d\x50\xf2\x1c\x9c\x63\xf1\xff\x66\xd3\xdd\x81\x2b\x6e\xb1\xbb\x4d\xcf\x04\x19\xf4\x6b\x9e\x2e\x78\x8e\x60\x56\x29\x3d\x26\x09\x4c\x9b\xe0\x50\x6b\xb5\x12\x19\x1a\x30\xa8\x57\xa8\xcf\x8c\xc8\x10\x66\x42\x66\x42\xe6\x06\xe6\x4a\x83\x2d\x10\xf2\xa7\xc7\x4b\xb0\x9a\x4b\x53\x2b\x6d\x43\x45\xb7\x16\x96\x56\x94\xe2\x3f\x34\x1e\xd3\x6e\x27\xb9\xae\x53\xf6\x8f\x8f\xc7\x28\xa1\xa8\x68\x19\x46\x83\x7e\x6f\x28\xd1\x26\x85\xb5\xf5\x90\x1e\x52\x25\x2d\xbe\xda\x21\x81\x7a\xc3\x5c\xa9\xbc\x44\x96\xab\x92\xcb\x9c\x29\x9d\xfb\x40\x49\x85\x96\x67\xdc\xf2\x80\xa2\xa5\x36\x13\x0c\x73\x61\x8b\xe5\x8c\xa5\xaa\x4a\x72\x75\xb6\x10\x36\xa1\xdf\x6e\x29\xe1\x60\xd3\x35\xd5\x25\x52\x1c\xf4\x7b\xf5\x0c\x86\xce\xb1\xc7\x2f\xb7\xbe\xbe\x47\x6e\x0b\x38\xdb\x6c\x86\x83\xfe\x38\xd2\x74\xc7\x17\xf8\xf5\xe9\xf1\x32\xf4\x02\x15\x5f\xa0\x01\x0e\x06\x2d\xa8\x39\xa0\xcc\x6a\x25\xa4\x35\xc0\x57\x5c\x94\x7c\x56\x22\x70\xda\xf7\x6c\x39\xc7\x62\x2a\x76\xcf\x2b\xdc\x6c\x5a\x42\xe6\x4b\x99\xbe\x09\x3d\xda\xc6\xba\x6e\xfe\x4d\x40\xd5\x56\x28\x69\x80\x31\xb6\xd3\x76\xe4\xf6\xc1\x6f\x8f\xa1\x9e\xb1\x77\x92\x81\x1b\xf4\x7b\xa6\x03\x36\x70\x7e\x01\xdf\x7f\xbc\x1f\x8d\x0e\xf4\x0e\x6d\x7f\xc1\xb9\xd2\x38\x6a\xc4\x98\xaa\xcb\xa0\xdd\x78\x32\xe8\xf7\x36\x7b\x69\x2e\x80\xd7\x35\xca\x6c\xb4\xb3\xdc\xb6\xc4\x18\x1b\x0f\xfa\x3d\x8d\x76\xa9\x25\xfc\x4e\x09\x43\x1a\x17\x94\x72\x0e\xa6\xea\x6f\xf5\x82\x1a\x76\x1a\x03\x32\x74\xcf\x39\xcd\x65\x8e\xf0\x49\x50\x3b\x2d\xe0\x0e\x6d\xa1\x32\xe3\x21\x3d\xe7\x9a\x00\x9f\x44\xe4\xe4\x1c\x76\x1b\xbb\xc7\x97\xc8\x3e\x1d\xe8\xb5\x12\x30\xe7\xda\x33\x8d\x1a\x13\x0f\xb9\xc2\x54\x65\x5e\xb6\x0e\xe4\x09\x9f\x97\x68\x22\xe2\x5a\x1e\x44\x98\x5a\x49\x83\x01\xb2\xc3\x08\x63\xcc\xaf\x7a\x1a\x9d\x3b\x23\x53\xf9\x06\x36\x83\xfe\x26\xba\x70\xcb\x0e\x88\xaa\x2e\xb1\x42\xf2\x09\x5d\x39\xe7\xbe\x2a\x4f\xcb\x61\xf5\x85\xb4\xa8\xe7\x9c\xcc\x6e\xd7\x35\x76\x03\x19\xab\x97\xa9\x25\x7f\x9c\x40\xe6\x01\x2e\x01\xde\x90\x79\xc3\x65\x56\xa2\xa6\x78\x6d\x13\x4d\x03\x31\x96\x9f\x26\x9d\x1a\xac\xda\xf6\xf3\x0b\xad\x7c\x5c\xb0\xbf\x60\x23\x03\x9f\xb7\xc9\xc6\xdb\x04\x6d\x0f\xa3\xd4\xbe\x42\x1c\x41\x2c\xda\x79\x02\x1a\x9f\xe1\xb3\xbf\x52\x5b\x7c\x94\x78\xba\xae\x9b\xb2\xc6\x30\xda\x07\x05\x95\x3b\xa8\x09\xa0\xd6\x8a\x92\x0f\xfa\xbd\x9f\x14\xbb\xf6\x4b\x54\x38\xd9\x6c\x8f\xd6\x70\xd9\xc8\x3e\x54\x9c\x2f\x86\xee\x89\x98\xfb\x53\xbf\x5d\x80\x14\xa5\x0f\xd6\x5c\x1d\x29\x4a\x1f\x31\x5e\xc2\xb8\xaa\xb1\x66\xa7\xd4\x37\x9e\x50\x00\x2f\x94\x73\x51\x34\xaf\x58\x64\x3d\xf8\xfd\x14\xca\x93\x04\x8e\x5d\x0e\x10\x34\x17\xdf\xbc\x21\xc2\x81\x88\xf8\x93\x34\xb3\x05\xb7\xa4\xc8\x0a\x35\x4d\xd5\xe0\xfe\x30\x4c\xf7\x1d\xa8\x63\x68\xab\x80\xc3\xd2\xa0\x3e\xcb\x54\xc5\x85\x3c\x06\x66\xf0\xa8\x45\xc5\xb5\x28\xd7\x74\x64\xbe\x2c\x41\x48\x3f\xd1\xbb\xb3\xf9\x58\x27\xa3\x9f\xfb\x96\xa1\x6e\x9e\xf0\x79\x6b\x52\x47\xfe\xe8\x3c\xed\xf8\x80\x0c\x76\x7e\xd1\x1c\x3a\xa4\xd3\x9e\xd9\xba\xca\x3e\x7f\xa0\x59\x98\x40\x27\x6a\x76\x74\x5c\x1d\x14\x2d\x9c\x68\x20\xef\xaa\xf6\xb1\x1e\x31\x87\x57\xef\x88\xc6\x75\xb9\x3e\x4d\xb4\xa3\xad\x1c\x52\xad\x2d\xe1\x54\xd9\x4c\x4d\x4c\x36\xc7\x4e\xbb\x60\x5d\xe5\x4c\xfd\x9e\x74\x37\x58\xd6\xa8\x0d\x3d\xf9\x5e\xf6\xde\xb2\x87\x47\x55\x95\xb5\x48\x76\x77\x35\x7e\x0b\xf0\x65\xd3\xcc\x5d\x4c\x60\xe5\x4b\xf7\x86\xa8\xb2\x30\x41\xc4\x1c\x56\x3b\x23\x25\x7c\x22\x21\x2c\x70\xed\xa5\xcf\x32\xfa\x80\x55\xb6\x20\xba\x9b\x44\x34\xc4\x2b\x6e\x61\xb4\x18\xc3\x4b\x21\xd2\xc2\x43\xcb\x12\x4a\x92\xae\x09\xc3\x65\xe6\x5f\x50\xf4\xa5\xc7\x2e\xb9\x54\x52\xa4\xbc\xbc\x41\x9e\xa1\xfe\x0b\xd7\xf4\xf5\x64\x63\x26\xa3\x82\x81\x84\x85\x94\x4b\x98\x61\x1b\x23\x4d\xd1\x18\xcc\x28\x3b\x0a\x5b\xa0\x8e\xb9\x3d\x80\x08\xb9\x68\x3b\xfe\x57\xd8\xe2\x1b\x2f\x97\x18\xc6\x26\x35\xfc\xfd\x8f\x1f\xe3\x8f\x91\xef\x14\x38\x5a\x8c\x3b\x21\xe2\xfb\x78\xab\x65\x6a\x5f\xbd\x8a\xff\x07\x00\x00\xff\xff\xde\xdb\x4e\x58\xf0\x0b\x00\x00")

func svcTransport_grpcGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcTransport_grpcGotemplate,
		"svc/transport_grpc.gotemplate",
	)
}

func svcTransport_grpcGotemplate() (*asset, error) {
	bytes, err := svcTransport_grpcGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/transport_grpc.gotemplate", size: 3056, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xad, 0x86, 0xa1, 0x23, 0x1f, 0x58, 0xd7, 0x34, 0xf1, 0x53, 0xb1, 0x6e, 0x3e, 0xc1, 0x64, 0x60, 0x4, 0x13, 0xf9, 0x2a, 0xee, 0xec, 0x12, 0x5c, 0x94, 0x40, 0x4d, 0x83, 0x38, 0xb5, 0x4b, 0x74}}
	return a, nil
}

var _svcTransport_httpGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x41\x0a\xc2\x30\x10\x05\xd0\xbd\xe0\x1d\x66\x5d\x30\x73\x8d\x2e\x85\xe6\x02\xa1\x7e\xa3\x18\x3b\x61\xf2\x75\x33\xf4\xee\x22\x74\xff\x5e\x84\x4e\xb2\x00\x52\xed\x42\xff\x8c\xa1\x15\x5b\xb5\xd7\x93\xfa\x20\x3b\xbd\x6c\xa3\x9b\x53\x89\x77\x6f\x85\x18\xa9\x9a\xdc\xcd\x65\xb5\x1b\x64\xd2\x7d\x3f\x9f\x22\xd6\xd2\x9a\xa4\x39\xe7\xeb\x8c\xd6\xe1\x69\x81\x7f\xe1\xf9\x48\x92\xfe\xec\x17\x00\x00\xff\xff\xec\x4b\xd0\x56\x6c\x00\x00\x00")

func svcTransport_httpGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcTransport_httpGotemplate,
		"svc/transport_http.gotemplate",
	)
}

func svcTransport_httpGotemplate() (*asset, error) {
	bytes, err := svcTransport_httpGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/transport_http.gotemplate", size: 108, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa4, 0x6d, 0xd0, 0x90, 0xb, 0xa7, 0xdc, 0xed, 0x93, 0x1e, 0xb8, 0x4d, 0xb9, 0x58, 0x20, 0xd6, 0x10, 0x56, 0x1f, 0x4b, 0xf4, 0x55, 0xdb, 0x96, 0xa5, 0xfd, 0x46, 0xe0, 0x5f, 0x40, 0xf4, 0x57}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/NAME/main.gotemplate":          cmdNameMainGotemplate,
	"handlers/handlers.gotemplate":      handlersHandlersGotemplate,
	"handlers/hooks.gotemplate":         handlersHooksGotemplate,
	"handlers/middlewares.gotemplate":   handlersMiddlewaresGotemplate,
	"svc/client/grpc/client.gotemplate": svcClientGrpcClientGotemplate,
	"svc/client/http/client.gotemplate": svcClientHttpClientGotemplate,
	"svc/endpoints.gotemplate":          svcEndpointsGotemplate,
	"svc/server/run.gotemplate":         svcServerRunGotemplate,
	"svc/transport_grpc.gotemplate":     svcTransport_grpcGotemplate,
	"svc/transport_http.gotemplate":     svcTransport_httpGotemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": &bintree{nil, map[string]*bintree{
		"NAME": &bintree{nil, map[string]*bintree{
			"main.gotemplate": &bintree{cmdNameMainGotemplate, map[string]*bintree{}},
		}},
	}},
	"handlers": &bintree{nil, map[string]*bintree{
		"handlers.gotemplate":    &bintree{handlersHandlersGotemplate, map[string]*bintree{}},
		"hooks.gotemplate":       &bintree{handlersHooksGotemplate, map[string]*bintree{}},
		"middlewares.gotemplate": &bintree{handlersMiddlewaresGotemplate, map[string]*bintree{}},
	}},
	"svc": &bintree{nil, map[string]*bintree{
		"client": &bintree{nil, map[string]*bintree{
			"grpc": &bintree{nil, map[string]*bintree{
				"client.gotemplate": &bintree{svcClientGrpcClientGotemplate, map[string]*bintree{}},
			}},
			"http": &bintree{nil, map[string]*bintree{
				"client.gotemplate": &bintree{svcClientHttpClientGotemplate, map[string]*bintree{}},
			}},
		}},
		"endpoints.gotemplate": &bintree{svcEndpointsGotemplate, map[string]*bintree{}},
		"server": &bintree{nil, map[string]*bintree{
			"run.gotemplate": &bintree{svcServerRunGotemplate, map[string]*bintree{}},
		}},
		"transport_grpc.gotemplate": &bintree{svcTransport_grpcGotemplate, map[string]*bintree{}},
		"transport_http.gotemplate": &bintree{svcTransport_httpGotemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
